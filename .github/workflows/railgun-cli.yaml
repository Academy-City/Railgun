name: Railgun CLI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Railgun                       # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: Railgun.Tests                # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: dotnet restore

      # Execute all unit tests in the solution
      - name: Execute unit tests
        run: dotnet test

      # Create the app package by building and packaging the Windows Application Packaging project
      - name: Publish the application
        run: dotnet publish Railgun -c Release

      - uses: papeloto/action-zip@v1
        name: Zip files up
        with:
          files: Railgun/bin/Release/net5.0/win-x64/publish/
          dest: ./railgun-win-x64.zip
          
      - name: Set tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -f -a nightly -m "Nightly build"
          git push origin -f --follow-tags nightly

      - name: Deploy release
        uses: WebFreak001/deploy-nightly@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/Academy-City/Railgun/releases/48288539/assets{?name,label}
          release_id: 48288539 # same as above (id can just be taken out the upload_url, it's used to find old releases)
          asset_path: ./railgun-win-x64.zip # path to archive to upload
          asset_name: railgun-win-x64-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
          asset_content_type: application/zip # required by GitHub API
          max_releases: 1