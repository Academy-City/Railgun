name: Railgun CLI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Railgun                       # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: Railgun.Tests                # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      # Execute all unit tests in the solution
      - name: Execute unit tests
        run: dotnet test

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: dotnet restore

      # Create the app package by building and packaging the Windows Application Packaging project
      - name: Publish the application
        run: dotnet publish

      # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Package
          path: Railgun/bin/Debug/net5.0/win-x64/publish
